go 变量
1、go 中，有两种声明并赋值的方式
	a、 var name [type] = value
	b、 name := value  // 只能用在函数体中，不能用在全局变量
2、全局变量，允许只声明不使用，其他变量不允许
3、go 里面也有值类型和引用类型（指针），引用类型还包括 slices 和 map，指针类型，毫无疑问，对性能提升很有帮助
4、下划线 _ 是一个只写变量，不能用来读取，这个用于用户不关心函数返回值的情况。比如下面的代码
	_,b = funab()
	funab 返回了两个值，但是第一个值并不需要，所以赋值给 _
	那么，为什么不直接用一个变量来存储呢，比如
	a,b := funab()
	根据 go 的规则，a 既然已经声明了，就必须要使用，很显然，既然都不关心 a 的值，更没必要使用了。

5、带有 ++ 和 -- 的句子，只能作为语句，也就是不能像c++使用 a[i++]=0; 
6、类型别名，使用 type name int的形式，但是与c++ 中的typename不同，go中的type定义的新类型，与原类型不完全相同，比如不能使用原有类型的自带方法
7、和python类似，字符串类型，是字节的定长数组，不能修改.go中的字符串，不是以 \0 结尾，而是长度
8、和python类似，go也有转义字符串和非转移字符串，使用反引号围绕，比如 `are is ok`


go 函数
1、与c++不一样，go中调用函数时，该函数不一定需要声明，比如下面代码
  func a()
  {
    b()
  }
  func b()
  {
    //code
  }
  可以看到，a 中调用 b的时候，b尚未定义，这在c++中时不允许的。
2、字符串处理函数，大多数都在 strings 模块中
包管理
1、默认的包管理，很麻烦，需要将模块放在 GOPATH 或者 GOROOT 相关目录下面。 GOMOD 可以方便的解决包管理问题。当然在import的时候，也可以使用相对路径查找，比如 ./abc ，这样的话，不使用gomod，也可以找到该模块
2、 go.mod 中 module name 中的name，与上级文件夹名称，没有关系
3、init 函数，是 go 语言引入的一个很方便的特性。在c++中，可能常常有这样的需求
  a、需要在程序正式运行前，获取或者设置一些信息（比如系统版本号，初始化网络）
  b、这些信息不是常量，所以没法在编译器确定
  c、这些信息，只需要设置或者获取一次
  c++ 中的一个可行的做法是
  static int init_once = init_fun();
  int init_fun()
  {
  	// init code here
  	return 0;
  }
  在 go 里面，在每个文件中，都可以使用 init 函数了。init函数具有以下特点：
  a、执行优先级比 main 高
  b、每个源文件，可以包含一个或者多个init函数，
  c、所有init函数的执行是顺序的，但是一个源文件中的多个init函数，执行顺序是未定义的
  
 3、控制
 a、go 中的switch变量，可以是任何类型，在c++中，被限制为整型系列（int,char，bool）。go中只要是相同类型即可。而且不需要使用break去中断分支，
